{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Fri.Services where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified Fri.Messages
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
  ( serverLoop,
  )
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data Service request response = Service
  { serviceRegister ::
      request
        'HsGRPC.ServerStreaming
        Fri.Messages.RegisterRequest
        Fri.Messages.RegisterResponse ->
      Hs.IO
        ( response
            'HsGRPC.ServerStreaming
            Fri.Messages.RegisterResponse
        ),
    serviceSearch ::
      request
        'HsGRPC.ServerStreaming
        Fri.Messages.SearchRequest
        Fri.Messages.SearchResponse ->
      Hs.IO
        ( response
            'HsGRPC.ServerStreaming
            Fri.Messages.SearchResponse
        )
  }
  deriving (Hs.Generic)

serviceServer ::
  Service HsGRPC.ServerRequest HsGRPC.ServerResponse ->
  HsGRPC.ServiceOptions ->
  Hs.IO ()
serviceServer
  Service
    { serviceRegister = serviceRegister,
      serviceSearch = serviceSearch
    }
  ( ServiceOptions
      serverHost
      serverPort
      useCompression
      userAgentPrefix
      userAgentSuffix
      initialMetadata
      sslConfig
      logger
      serverMaxReceiveMessageLength
    ) =
    ( HsGRPC.serverLoop
        HsGRPC.defaultOptions
          { HsGRPC.optNormalHandlers = [],
            HsGRPC.optClientStreamHandlers = [],
            HsGRPC.optServerStreamHandlers =
              [ ( HsGRPC.ServerStreamHandler
                    (HsGRPC.MethodName "/frirpc.Service/Register")
                    (HsGRPC.convertGeneratedServerWriterHandler serviceRegister)
                ),
                ( HsGRPC.ServerStreamHandler
                    (HsGRPC.MethodName "/frirpc.Service/Search")
                    (HsGRPC.convertGeneratedServerWriterHandler serviceSearch)
                )
              ],
            HsGRPC.optBiDiStreamHandlers = [],
            optServerHost = serverHost,
            optServerPort = serverPort,
            optUseCompression = useCompression,
            optUserAgentPrefix = userAgentPrefix,
            optUserAgentSuffix = userAgentSuffix,
            optInitialMetadata = initialMetadata,
            optSSLConfig = sslConfig,
            optLogger = logger,
            optMaxReceiveMessageLength = serverMaxReceiveMessageLength
          }
    )

serviceClient ::
  HsGRPC.Client ->
  Hs.IO (Service HsGRPC.ClientRequest HsGRPC.ClientResult)
serviceClient client =
  (Hs.pure Service)
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/frirpc.Service/Register")
                )
        )
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/frirpc.Service/Search")
                )
        )
