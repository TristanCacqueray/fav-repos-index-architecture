{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Protos.Fri where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
  ( serverLoop,
  )
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data Repo = Repo
  { repoName :: Hs.Text,
    repoTopic :: Hs.Vector Hs.Text,
    repoDescription :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Repo where
  nameOf _ = (Hs.fromString "Repo")

instance HsProtobuf.HasDefault Repo

instance HsProtobuf.Message Repo where
  encodeMessage
    _
    Repo
      { repoName = repoName,
        repoTopic = repoTopic,
        repoDescription = repoDescription
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                repoName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    repoTopic
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                repoDescription
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure Repo)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "topic")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "description")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB Repo where
  toJSONPB (Repo f1 f2 f3) =
    ( HsJSONPB.object
        ["name" .= f1, "topic" .= f2, "description" .= f3]
    )
  toEncodingPB (Repo f1 f2 f3) =
    ( HsJSONPB.pairs
        ["name" .= f1, "topic" .= f2, "description" .= f3]
    )

instance HsJSONPB.FromJSONPB Repo where
  parseJSONPB =
    ( HsJSONPB.withObject
        "Repo"
        ( \obj ->
            (Hs.pure Repo) <*> obj .: "name" <*> obj .: "topic"
              <*> obj .: "description"
        )
    )

instance HsJSONPB.ToJSON Repo where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Repo where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema Repo where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      repoName <- declare_name Proxy.Proxy
      let declare_topic = HsJSONPB.declareSchemaRef
      repoTopic <- declare_topic Proxy.Proxy
      let declare_description = HsJSONPB.declareSchemaRef
      repoDescription <- declare_description Proxy.Proxy
      let _ =
            Hs.pure Repo <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_topic
              <*> HsJSONPB.asProxy declare_description
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName = Hs.Just "Repo",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", repoName),
                          ("topic", repoTopic),
                          ("description", repoDescription)
                        ]
                  }
            }
        )

newtype RegisterRequest = RegisterRequest
  { registerRequestUsername ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named RegisterRequest where
  nameOf _ = (Hs.fromString "RegisterRequest")

instance HsProtobuf.HasDefault RegisterRequest

instance HsProtobuf.Message RegisterRequest where
  encodeMessage
    _
    RegisterRequest {registerRequestUsername = registerRequestUsername} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                registerRequestUsername
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure RegisterRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "username")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB RegisterRequest where
  toJSONPB (RegisterRequest f1) =
    (HsJSONPB.object ["username" .= f1])
  toEncodingPB (RegisterRequest f1) =
    (HsJSONPB.pairs ["username" .= f1])

instance HsJSONPB.FromJSONPB RegisterRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "RegisterRequest"
        (\obj -> (Hs.pure RegisterRequest) <*> obj .: "username")
    )

instance HsJSONPB.ToJSON RegisterRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON RegisterRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema RegisterRequest where
  declareNamedSchema _ =
    do
      let declare_username = HsJSONPB.declareSchemaRef
      registerRequestUsername <- declare_username Proxy.Proxy
      let _ =
            Hs.pure RegisterRequest
              <*> HsJSONPB.asProxy declare_username
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "RegisterRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("username", registerRequestUsername)]
                  }
            }
        )

newtype RegisterResponse = RegisterResponse
  { registerResponseValue ::
      Hs.Maybe RegisterResponseValue
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named RegisterResponse where
  nameOf _ = (Hs.fromString "RegisterResponse")

instance HsProtobuf.HasDefault RegisterResponse

instance HsProtobuf.Message RegisterResponse where
  encodeMessage
    _
    RegisterResponse {registerResponseValue = registerResponseValue} =
      ( Hs.mconcat
          [ case registerResponseValue of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  RegisterResponseValueRepo y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        ( Hs.coerce @(Hs.Maybe Protos.Fri.Repo)
                            @(HsProtobuf.Nested Protos.Fri.Repo)
                            (Hs.Just y)
                        )
                    )
                  RegisterResponseValueMsg y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        (HsProtobuf.ForceEmit y)
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure RegisterResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.fmap RegisterResponseValueRepo))
                    <*> ( Hs.coerce @(_ (HsProtobuf.Nested Protos.Fri.Repo))
                            @(_ (Hs.Maybe Protos.Fri.Repo))
                            HsProtobuf.decodeMessageField
                        )
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.Just Hs.. RegisterResponseValueMsg))
                    <*> HsProtobuf.decodeMessageField
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB RegisterResponse where
  toJSONPB (RegisterResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeValue =
                  ( case f1_or_f2 of
                      Hs.Just (RegisterResponseValueRepo f1) -> (HsJSONPB.pair "repo" f1)
                      Hs.Just (RegisterResponseValueMsg f2) -> (HsJSONPB.pair "msg" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("value" .= (HsJSONPB.objectOrNull [encodeValue] options)) options
                    else encodeValue options
          )
        ]
    )
  toEncodingPB (RegisterResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeValue =
                  ( case f1_or_f2 of
                      Hs.Just (RegisterResponseValueRepo f1) -> (HsJSONPB.pair "repo" f1)
                      Hs.Just (RegisterResponseValueMsg f2) -> (HsJSONPB.pair "msg" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("value" .= (HsJSONPB.pairsOrNull [encodeValue] options)) options
                    else encodeValue options
          )
        ]
    )

instance HsJSONPB.FromJSONPB RegisterResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "RegisterResponse"
        ( \obj ->
            (Hs.pure RegisterResponse)
              <*> ( let parseValue parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. RegisterResponseValueRepo
                                <$> (HsJSONPB.parseField parseObj "repo"),
                              Hs.Just Hs.. RegisterResponseValueMsg
                                <$> (HsJSONPB.parseField parseObj "msg"),
                              Hs.pure Hs.Nothing
                            ]
                     in ((obj .: "value") Hs.>>= (HsJSONPB.withObject "value" parseValue))
                          <|> (parseValue obj)
                  )
        )
    )

instance HsJSONPB.ToJSON RegisterResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON RegisterResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema RegisterResponse where
  declareNamedSchema _ =
    do
      let declare_value = HsJSONPB.declareSchemaRef
      registerResponseValue <- declare_value Proxy.Proxy
      let _ = Hs.pure RegisterResponse <*> HsJSONPB.asProxy declare_value
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "RegisterResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("value", registerResponseValue)]
                  }
            }
        )

data RegisterResponseValue
  = RegisterResponseValueRepo Protos.Fri.Repo
  | RegisterResponseValueMsg Hs.Text
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named RegisterResponseValue where
  nameOf _ = (Hs.fromString "RegisterResponseValue")

instance HsJSONPB.ToSchema RegisterResponseValue where
  declareNamedSchema _ =
    do
      let declare_repo = HsJSONPB.declareSchemaRef
      registerResponseValueRepo <- declare_repo Proxy.Proxy
      let _ =
            Hs.pure RegisterResponseValueRepo
              <*> HsJSONPB.asProxy declare_repo
      let declare_msg = HsJSONPB.declareSchemaRef
      registerResponseValueMsg <- declare_msg Proxy.Proxy
      let _ =
            Hs.pure RegisterResponseValueMsg
              <*> HsJSONPB.asProxy declare_msg
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "RegisterResponseValue",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("repo", registerResponseValueRepo),
                          ("msg", registerResponseValueMsg)
                        ],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )

newtype SearchRequest = SearchRequest
  { searchRequestQuery ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named SearchRequest where
  nameOf _ = (Hs.fromString "SearchRequest")

instance HsProtobuf.HasDefault SearchRequest

instance HsProtobuf.Message SearchRequest where
  encodeMessage
    _
    SearchRequest {searchRequestQuery = searchRequestQuery} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                searchRequestQuery
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure SearchRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "query")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB SearchRequest where
  toJSONPB (SearchRequest f1) = (HsJSONPB.object ["query" .= f1])
  toEncodingPB (SearchRequest f1) = (HsJSONPB.pairs ["query" .= f1])

instance HsJSONPB.FromJSONPB SearchRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "SearchRequest"
        (\obj -> (Hs.pure SearchRequest) <*> obj .: "query")
    )

instance HsJSONPB.ToJSON SearchRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON SearchRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema SearchRequest where
  declareNamedSchema _ =
    do
      let declare_query = HsJSONPB.declareSchemaRef
      searchRequestQuery <- declare_query Proxy.Proxy
      let _ = Hs.pure SearchRequest <*> HsJSONPB.asProxy declare_query
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "SearchRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("query", searchRequestQuery)]
                  }
            }
        )

data SearchResponse = SearchResponse
  { searchResponseScore ::
      Hs.Int32,
    searchResponseRepo :: Hs.Maybe Protos.Fri.Repo
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named SearchResponse where
  nameOf _ = (Hs.fromString "SearchResponse")

instance HsProtobuf.HasDefault SearchResponse

instance HsProtobuf.Message SearchResponse where
  encodeMessage
    _
    SearchResponse
      { searchResponseScore = searchResponseScore,
        searchResponseRepo = searchResponseRepo
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                searchResponseScore
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Maybe Protos.Fri.Repo)
                    @(HsProtobuf.Nested Protos.Fri.Repo)
                    searchResponseRepo
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure SearchResponse)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.Nested Protos.Fri.Repo))
              @(_ (Hs.Maybe Protos.Fri.Repo))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Int32)
          (HsProtobuf.Single "score")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Repo")))
          (HsProtobuf.Single "repo")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB SearchResponse where
  toJSONPB (SearchResponse f1 f2) =
    (HsJSONPB.object ["score" .= f1, "repo" .= f2])
  toEncodingPB (SearchResponse f1 f2) =
    (HsJSONPB.pairs ["score" .= f1, "repo" .= f2])

instance HsJSONPB.FromJSONPB SearchResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "SearchResponse"
        ( \obj ->
            (Hs.pure SearchResponse) <*> obj .: "score" <*> obj .: "repo"
        )
    )

instance HsJSONPB.ToJSON SearchResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON SearchResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema SearchResponse where
  declareNamedSchema _ =
    do
      let declare_score = HsJSONPB.declareSchemaRef
      searchResponseScore <- declare_score Proxy.Proxy
      let declare_repo = HsJSONPB.declareSchemaRef
      searchResponseRepo <- declare_repo Proxy.Proxy
      let _ =
            Hs.pure SearchResponse <*> HsJSONPB.asProxy declare_score
              <*> HsJSONPB.asProxy declare_repo
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "SearchResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("score", searchResponseScore),
                          ("repo", searchResponseRepo)
                        ]
                  }
            }
        )

data Service request response = Service
  { serviceRegister ::
      request
        'HsGRPC.ServerStreaming
        Protos.Fri.RegisterRequest
        Protos.Fri.RegisterResponse ->
      Hs.IO
        ( response
            'HsGRPC.ServerStreaming
            Protos.Fri.RegisterResponse
        ),
    serviceSearch ::
      request
        'HsGRPC.ServerStreaming
        Protos.Fri.SearchRequest
        Protos.Fri.SearchResponse ->
      Hs.IO
        ( response
            'HsGRPC.ServerStreaming
            Protos.Fri.SearchResponse
        )
  }
  deriving (Hs.Generic)

serviceServer ::
  Service HsGRPC.ServerRequest HsGRPC.ServerResponse ->
  HsGRPC.ServiceOptions ->
  Hs.IO ()
serviceServer
  Service
    { serviceRegister = serviceRegister,
      serviceSearch = serviceSearch
    }
  ( ServiceOptions
      serverHost
      serverPort
      useCompression
      userAgentPrefix
      userAgentSuffix
      initialMetadata
      sslConfig
      logger
      serverMaxReceiveMessageLength
    ) =
    ( HsGRPC.serverLoop
        HsGRPC.defaultOptions
          { HsGRPC.optNormalHandlers = [],
            HsGRPC.optClientStreamHandlers = [],
            HsGRPC.optServerStreamHandlers =
              [ ( HsGRPC.ServerStreamHandler
                    (HsGRPC.MethodName "/fri.v1.Service/Register")
                    (HsGRPC.convertGeneratedServerWriterHandler serviceRegister)
                ),
                ( HsGRPC.ServerStreamHandler
                    (HsGRPC.MethodName "/fri.v1.Service/Search")
                    (HsGRPC.convertGeneratedServerWriterHandler serviceSearch)
                )
              ],
            HsGRPC.optBiDiStreamHandlers = [],
            optServerHost = serverHost,
            optServerPort = serverPort,
            optUseCompression = useCompression,
            optUserAgentPrefix = userAgentPrefix,
            optUserAgentSuffix = userAgentSuffix,
            optInitialMetadata = initialMetadata,
            optSSLConfig = sslConfig,
            optLogger = logger,
            optMaxReceiveMessageLength = serverMaxReceiveMessageLength
          }
    )

serviceClient ::
  HsGRPC.Client ->
  Hs.IO (Service HsGRPC.ClientRequest HsGRPC.ClientResult)
serviceClient client =
  (Hs.pure Service)
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/fri.v1.Service/Register")
                )
        )
    <*> ( (Hs.pure (HsGRPC.clientRequest client))
            <*> ( HsGRPC.clientRegisterMethod
                    client
                    (HsGRPC.MethodName "/fri.v1.Service/Search")
                )
        )
